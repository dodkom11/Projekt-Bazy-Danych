



/* +++++++++++++++++++++++++++    KLIENCI    +++++++++++++++++++++++++++ */

-- POKAZ WSYZSTKICH KLIENTOW
CREATE OR REPLACE FUNCTION SELECTKLIENCI
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT DISTINCT K.KONTO_ID ,K.IMIE, K. NAZWISKO, K.UPRAWNIENIA, A.MIEJSCOWOSC, A.WOJEWODZTWO ,A.KOD_POCZTOWY, A.ULICA, A.NR_DOMU, A.NR_LOKALU, KT.EMAIL, KT.NR_TEL FROM KONTO K, PRACOWNIK P, ADRES A, KONTAKT KT WHERE A.ADRES_ID = K.ADRES_ID AND K.UPRAWNIENIA = 'klient' AND KT.KONTAKT_ID = K.KONTAKT_ID]';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTKLIENCI;
/
 
-- POKAZ DANE KLIENTA PO ID
CREATE OR REPLACE FUNCTION SELECTKLIENCIKONTOID(IDKONTO INT)
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT DISTINCT K.KONTO_ID ,K.IMIE, K. NAZWISKO, K.UPRAWNIENIA, A.MIEJSCOWOSC, A.WOJEWODZTWO ,A.KOD_POCZTOWY, A.ULICA, A.NR_DOMU, A.NR_LOKALU, KT.EMAIL, KT.NR_TEL FROM KONTO K, PRACOWNIK P, ADRES A, KONTAKT KT WHERE A.ADRES_ID = K.ADRES_ID AND K.UPRAWNIENIA = 'klient' AND KT.KONTAKT_ID = K.KONTAKT_ID AND K.KONTO_ID=]' || IDKONTO;

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTKLIENCIKONTOID;
/

-- USUN KONTO O ZADANYM ID
CREATE OR REPLACE PROCEDURE DELETEKONTO
(KON_ID IN INT)
AS 
BEGIN 
  DELETE FROM KONTO
  WHERE KONTO_ID = KON_ID;
END DELETEKONTO;
/




/* +++++++++++++++++++++++++++    PRACOWNICY    +++++++++++++++++++++++++++ */ 

-- POKAZ WSZYSTKICH PRACOWNIKOW
CREATE OR REPLACE FUNCTION SELECTPRACOWNICY
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := 'SELECT K.KONTO_ID ,K.IMIE, K.NAZWISKO, K.UPRAWNIENIA, P.DATA_ZATRUDNIENIA, P.DATA_ZWOLNIENIA, P.PENSJA, P.PREMIA, A.MIEJSCOWOSC, A.WOJEWODZTWO ,A.KOD_POCZTOWY, A.ULICA, A.NR_DOMU, A.NR_LOKALU, KT.EMAIL, KT.NR_TEL FROM KONTO K, PRACOWNIK P, ADRES A, KONTAKT KT WHERE K.KONTO_ID = P.KONTO_ID AND A.ADRES_ID = K.ADRES_ID AND KT.KONTAKT_ID = K.KONTAKT_ID';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTPRACOWNICY;
/

-- POKAZ DANE PRACOWNIKA PO ID
create or replace FUNCTION SELECTPRACOWNIKKONTOID(IDKONTO INT)
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT DISTINCT K.KONTO_ID ,K.IMIE, K. NAZWISKO, K.UPRAWNIENIA, A.MIEJSCOWOSC, A.WOJEWODZTWO ,A.KOD_POCZTOWY, A.ULICA, A.NR_DOMU, A.NR_LOKALU, KT.EMAIL, KT.NR_TEL FROM KONTO K, PRACOWNIK P, ADRES A, KONTAKT KT WHERE A.ADRES_ID = K.ADRES_ID AND K.UPRAWNIENIA = 'pracownik' AND KT.KONTAKT_ID = K.KONTAKT_ID AND K.KONTO_ID=]' || IDKONTO;

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTPRACOWNIKKONTOID;
/

-- DODAJ PRACOWNIKA
-- Trigger zmienia automatycznie uprawnienia
CREATE OR REPLACE PROCEDURE INSERTPRACOWNIK
       ( 
        KON_ID IN INT,
        PEN IN FLOAT, 
        PREM IN FLOAT                 
       )
AS 
BEGIN 
    INSERT INTO PRACOWNIK(KONTO_ID, PENSJA, PREMIA) VALUES (KON_ID, PEN, PREM);

END INSERTPRACOWNIK;
/




/* +++++++++++++++++++++++++++    KURIERZY    +++++++++++++++++++++++++++ */ 

-- POKAZ WSYZSTKICH KURIEROW
create or replace FUNCTION SELECTKURIERZY
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := 'SELECT * FROM KURIER';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTKURIERZY;
/

-- POKAZ KURIER PO ID
create or replace FUNCTION SELECTKURIERID(KURIER_ID INT)
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := 'SELECT * FROM KURIER WHERE KURIER_ID = ' || KURIER_ID;

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTKURIERID;
/

-- DODAJ KURIERA
create or replace PROCEDURE INSERTKURIER(NAZ_FIRMY IN VARCHAR2)
AS 
BEGIN 

    INSERT INTO KURIER(NAZWA_FIRMY) VALUES (NAZ_FIRMY);

END INSERTKURIER;
/

-- USUN KURIERA O ID
create or replace PROCEDURE DELETEKURIER
(KON_ID IN INT)
AS 
BEGIN 
  DELETE FROM KURIER
  WHERE KURIER_ID = KON_ID;
END DELETEKURIER;
/




/* +++++++++++++++++++++++++++    DOSTAWCY    +++++++++++++++++++++++++++ */ 

-- POKAZ WSZYSTKICH DOSTAWCE
CREATE OR REPLACE FUNCTION SELECTDOSTAWCA
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT DISTINCT D.DOSTAWCA_ID, D.NAZWA_FIRMY, A.MIEJSCOWOSC, A.WOJEWODZTWO ,A.KOD_POCZTOWY, A.ULICA, A.NR_DOMU, A.NR_LOKALU, KT.EMAIL, KT.NR_TEL, KT.FAX, KT.WWW FROM DOSTAWCA D, ADRES A, KONTAKT KT WHERE A.ADRES_ID = D.ADRES_ID AND KT.KONTAKT_ID = D.KONTAKT_ID]';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTDOSTAWCA;
/

-- WYBIERZ DOSTAWCE PO ID
create or replace FUNCTION SELECTDOSTAWCAID(DOSTAW_ID INT)
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := 'SELECT DISTINCT D.DOSTAWCA_ID, D.NAZWA_FIRMY, A.MIEJSCOWOSC, A.WOJEWODZTWO ,A.KOD_POCZTOWY, A.ULICA, A.NR_DOMU, A.NR_LOKALU, KT.EMAIL, KT.NR_TEL, KT.FAX, KT.WWW FROM DOSTAWCA D, ADRES A, KONTAKT KT WHERE A.ADRES_ID = D.ADRES_ID AND KT.KONTAKT_ID = D.KONTAKT_ID AND D.DOSTAWCA_ID = ' || DOSTAW_ID;

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTDOSTAWCAID;
/

-- DODAJ DOSTAWCE
CREATE OR REPLACE PROCEDURE INSERTDOSTAWCA
       ( 
          NAZWA_FIR IN VARCHAR2,  
          MIEJSC IN VARCHAR2,
          WOJ IN VARCHAR2,
          KOD_POCZT IN VARCHAR2,
          UL IN VARCHAR2,
          NR_DOM IN INT,
          NR_LOK IN INT,
          MAIL IN VARCHAR2,
          TEL IN VARCHAR2,
          FAX_1 IN VARCHAR2,          
          WWW_1 IN VARCHAR2                   
       )
AS 
          ADR_ID NUMBER;
          KONT_ID NUMBER;
BEGIN 
  
          INSERT INTO ADRES(ADRES_ID, MIEJSCOWOSC, WOJEWODZTWO, KOD_POCZTOWY, ULICA, NR_DOMU, NR_LOKALU) VALUES (ADR_ID, MIEJSC, WOJ, KOD_POCZT, UL, NR_DOM, NR_LOK);
          INSERT INTO KONTAKT(KONTAKT_ID, NR_TEL, FAX, EMAIL, WWW) VALUES (KONT_ID, TEL, FAX_1, MAIL, WWW_1);  
          ADR_ID  := ADRES_SEQ.CURRVAL;
          KONT_ID := KONTAKT_SEQ.CURRVAL;
          INSERT INTO DOSTAWCA(KONTAKT_ID, ADRES_ID, NAZWA_FIRMY) VALUES (KONT_ID, ADR_ID, NAZWA_FIR);  

END INSERTDOSTAWCA;    
/

-- USUN DOSTAWCE PO ID
create or replace PROCEDURE DELETEDOSTAWCA
(KON_ID IN INT)
AS 
BEGIN 
  DELETE FROM DOSTAWCA
  WHERE DOSTAWCA_ID = KON_ID;
END DELETEDOSTAWCA;
/




/* +++++++++++++++++++++++++++    PRODUKTY    +++++++++++++++++++++++++++ */ 

-- POKAZ OSTATNIE 6 DODANYCH PRODUKTOW
CREATE OR REPLACE FUNCTION LAST6PRODUCTS
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT * FROM ( SELECT TO_CHAR(DATA_DODANIA, 'DD-MON-YYYY HH24:MI') AS CTIME, PRODUKT.* FROM PRODUKT ORDER BY DATA_DODANIA DESC ) WHERE ROWNUM <= 6]';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END LAST6PRODUCTS;
/

-- POKAZ PRODUKTY Z DANEJ KATEGORI
create or replace FUNCTION SELECTPRODUKTYKATEGORIAID(KAT_ID IN VARCHAR2)
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT * FROM ( SELECT TO_CHAR(DATA_DODANIA, 'DD-MON-YYYY HH24:MI') AS CTIME, PRODUKT.* FROM PRODUKT ORDER BY DATA_DODANIA DESC ) WHERE KATEGORIA_ID =']' || KAT_ID || q'[']' ;

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTPRODUKTYKATEGORIAID;
/

-- POKAZ WSYZSTKICH KLIENTOW
CREATE OR REPLACE FUNCTION SELECTPRODUKTY
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  
  MY_QUERY := q'[SELECT DISTINCT P.PRODUKT_ID, D.NAZWA_FIRMY, K.KATEGORIA_NAZWA, P.PRODUCENT, P.NUMER_KATALOGOWY, P.MODEL, P.CENA, P.SZTUK_NA_MAGAZYNIE, P.DATA_DODANIA, D.NAZWA_FIRMY, K.KATEGORIA_NAZWA FROM PRODUKT P, DOSTAWCA D, KATEGORIA K WHERE P.DOSTAWCA_ID = D.DOSTAWCA_ID AND P.KATEGORIA_ID = K.KATEGORIA_ID]';
  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTPRODUKTY;
/

-- POKAZ DANE KLIENTA PO ID
CREATE OR REPLACE FUNCTION SELECTPRODUKTID(IDPROD INT)
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT DISTINCT P.PRODUKT_ID, D.NAZWA_FIRMY, K.KATEGORIA_NAZWA, P.PRODUCENT, P.NUMER_KATALOGOWY, P.MODEL, P.CENA, P.SZTUK_NA_MAGAZYNIE, P.DATA_DODANIA, D.NAZWA_FIRMY, K.KATEGORIA_NAZWA FROM PRODUKT P, DOSTAWCA D, KATEGORIA K WHERE P.DOSTAWCA_ID = D.DOSTAWCA_ID AND P.KATEGORIA_ID = K.KATEGORIA_ID AND P.PRODUKT_ID = ']' || IDPROD || q'[']';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTPRODUKTID;
/

-- DELETE PRODUKT
CREATE OR REPLACE PROCEDURE DELETEPRODUKT
(PROD_ID IN INT)
AS 
BEGIN 
  DELETE FROM PRODUKT
  WHERE PRODUKT_ID = PROD_ID;
END DELETEPRODUKT;
/


-- ?????????  Procedura na dodawanie do bazy wielu rekordow, liczby ustawia randomowo z zakresu jaki wybierzemy
CREATE OR REPLACE PROCEDURE DODAWANIE_PRODUKTOW AS 

BEGIN

  FOR i IN 1..1000 LOOP

    INSERT INTO PRODUKT (DOSTAWCA_ID,KATEGORIA_ID,PRODUCENT,NUMER_KATALOGOWY,MODEL,CENA,SZTUK_NA_MAGAZYNIE,OPIS) 
    VALUES (dbms_random.value(1,4),dbms_random.value(1,3),'JAXON','GDFGDF-665','TERRA',dbms_random.value(1,1044),dbms_random.value(1,130),'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla elementum turpis risus, eu hendrerit odio lobortis aliquet.');
    
  END LOOP;
END DODAWANIE_PRODUKTOW;
/


/* +++++++++++++++++++++++++++    KATEGORIA    +++++++++++++++++++++++++++ */ 

-- POKAZ WSZYSTKIE KATEGORIE
create or replace FUNCTION SELECTKATEGORIA
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT * FROM KATEGORIA]';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTKATEGORIA;
/



/* +++++++++++++++++++++++++++    KOSZYK    +++++++++++++++++++++++++++ */ 

-- POKAZ PRODUKTY Z KOSZYKA
CREATE OR REPLACE FUNCTION SELECTKOSZYK
  RETURN SYS_REFCURSOR 
AS
  MY_CURSOR SYS_REFCURSOR;
  MY_QUERY VARCHAR2(500);
BEGIN

  MY_QUERY := q'[SELECT P.PRODUCENT, P.NUMER_KATALOGOWY, P.MODEL, P.CENA, P.SZTUK_NA_MAGAZYNIE, K.ILOSC_SZTUK, SUM(CENA*ILOSC_SZTUK) as SUMA FROM PRODUKT P, KOSZYK K WHERE P.PRODUKT_ID = K.PRODUKT_ID
GROUP BY P.PRODUCENT, P.NUMER_KATALOGOWY, P.MODEL, P.CENA, P.SZTUK_NA_MAGAZYNIE, K.ILOSC_SZTUK]';

  OPEN MY_CURSOR FOR MY_QUERY;

  RETURN MY_CURSOR;
END SELECTKOSZYK;
/

-- DODAJ PRODUKT DO KOSZYKA
create or replace PROCEDURE INSERTKOSZYK(PROD_ID IN VARCHAR2, KON_ID IN VARCHAR2, ILOSC_SZT IN VARCHAR2)
AS 
BEGIN 

    INSERT INTO KOSZYK(PRODUKT_ID, KONTO_ID, ILOSC_SZTUK) VALUES (PROD_ID, KON_ID, ILOSC_SZT);

END INSERTKOSZYK;
/

-- ZWIEKSZ ILOSC SZTUK DANEGO PRODUKTU O 1
create or replace PROCEDURE UPDATEKOSZYKINC(PROD_ID IN VARCHAR2, KON_ID IN VARCHAR2)
AS 
BEGIN 

    UPDATE KOSZYK
        SET ILOSC_SZTUK = ILOSC_SZTUK + 1 
    WHERE PRODUKT_ID = PROD_ID
    AND KONTO_ID = KON_ID;

END UPDATEKOSZYKINC;

/

/* +++++++++++++++++++++++++++    ZAMOWIENIE    +++++++++++++++++++++++++++ */ 

/* 
Tworzy nowe zamowienie >> dodaje produkty z KOSZYK do ZAMOWIONE_PRODUKTY >> usuwa KOSZYK 
  BEGIN
    STWORZ_ZAMOWIENIE(1, 1, '1', '11/11/11', '1');
  END;
*/
CREATE OR REPLACE PROCEDURE STWORZ_ZAMOWIENIE(KON_ID IN INT, KOSZT_ZAM IN FLOAT, METODA_PLAT IN VARCHAR2, DATA_WYS IN VARCHAR2, DOKUMENT_SPRZ IN VARCHAR2)
AS
ID_ZAM NUMBER;
BEGIN

  
  INSERT INTO ZAMOWIENIE (ZAMOWIENIE_ID, KONTO_ID, KOSZT_ZAMOWIENIA, METODA_PLATNOSCI, DATA_WYSYLKI, DOKUMENT_SPRZEDAZY)
  VALUES (ID_ZAM, KON_ID, KOSZT_ZAM, METODA_PLAT, TO_DATE(DATA_WYS, 'DD/MM/YY'), DOKUMENT_SPRZ);

  ID_ZAM:= ZAMOWIENIE_SEQ.CURRVAL;

  INSERT INTO ZAMOWIONE_PRODUKTY (PRODUKT_ID, ZAMOWIENIE_ID, ILOSC_SZTUK)
  SELECT PRODUKT_ID, ID_ZAM, ILOSC_SZTUK FROM KOSZYK
  WHERE
  KONTO_ID = KON_ID;


  DELETE FROM KOSZYK 
  WHERE
  KONTO_ID = KON_ID;

END;
/




/* +++++++++++++++++++++++++++    ADRES    +++++++++++++++++++++++++++ */ 

-- tworzy nowy adres i dodaje go do konta(KON_ID)
CREATE OR REPLACE PROCEDURE INSERTADRES
       ( 
          KON_ID IN INT,
          MIEJSC IN VARCHAR2,
          WOJ IN VARCHAR2,
          KOD_POCZT IN VARCHAR2,
          UL IN VARCHAR2,
          NR_DOM IN INT,
          NR_LOK IN INT                
       )
AS 
  ADR_ID NUMBER;
BEGIN 
  
    INSERT INTO ADRES(ADRES_ID, MIEJSCOWOSC, WOJEWODZTWO, KOD_POCZTOWY, ULICA, NR_DOMU, NR_LOKALU) VALUES (ADR_ID, MIEJSC, WOJ, KOD_POCZT, UL, NR_DOM, NR_LOK);
      
    ADR_ID:= ADRES_SEQ.CURRVAL;

    UPDATE KONTO
  SET ADRES_ID = ADR_ID
  WHERE KONTO_ID = KON_ID;

END INSERTADRES;
/




/* +++++++++++++++++++++++++++    KONTAKT    +++++++++++++++++++++++++++ */ 

--tworzy nowy kontakt i dodaje go do konta(KON_ID)
CREATE OR REPLACE PROCEDURE INSERTKONTAKT
       (
          KON_ID IN INT, 
          TEL IN VARCHAR2,
          FAX_1 IN VARCHAR2,
          MAIL IN VARCHAR2,
          WWW_1 IN VARCHAR2            
       )
AS 
  KONT_ID NUMBER;
BEGIN 
  
        INSERT INTO KONTAKT(KONTAKT_ID, NR_TEL, FAX, EMAIL, WWW) VALUES (KONT_ID, TEL, FAX_1, MAIL, WWW_1);

        KONT_ID:= KONTAKT_SEQ.CURRVAL;  

        UPDATE KONTO
        SET KONTAKT_ID = KONT_ID
        WHERE KONTO_ID = KON_ID;

END INSERTKONTAKT;
/




/* +++++++++++++++++++++++++++    INNE FUNKCJE    +++++++++++++++++++++++++++ */ 

-- POKAZ LICZBE WIERSZY DLA DANEJ TABELI ORAZ KOLUMNY O ZADANYM WARUNKU
create or replace function COUNTRW(TABLENAME VARCHAR2, COLUMNNAME VARCHAR2, CONDITION VARCHAR2) 
   return number
AS
   row_count number;
   MY_QUERY VARCHAR2(500);
BEGIN
    SELECT COUNT(KATEGORIA_ID) into row_count FROM KATEGORIA;

    MY_QUERY := 'SELECT COUNT(' || COLUMNNAME || ') FROM ' || TABLENAME || ' WHERE ' || CONDITION; 
    EXECUTE IMMEDIATE MY_QUERY INTO row_count;    

    return row_count;
END COUNTRW;
/